Distribution spec and manual
============================

The file format is a flat file consisting of N buckets of size B each.  B
must be a multiple of 64.

The filename must end with a ".b", followed by an integer in decimal.  The
integer encodes the blocksize of the file; the file must have an integer
number of blocks.


The protocol
============

The protocol is done over TLS 1.0 or later.  The keys MUST be at least
1536-bits RSA or equivalent; the ciphersuites MUST have ephemeral keys.

All integer values are sent in network (big-endian) order.

All hashes below are SHA256.  That'll change later.  Flag day possible.


The command format is:

   [32 bytes] request ID
   [4 bytes] command-code
   [4 bytes] command-len
   [4 bytes] flags
   [N bytes] Command-body  {Exactly command-len bytes.}

This is the format used by both client and server for all their
communications.  The client and server send each other a sequence of these
until one of them closes the connection.

Request IDs are chosen randomly by the client.  Any response to a client
command must have the same Request ID.  A server may send a response that
corresponds to no client request by using a request_ID of 0x000000...000.

For forward-compatibility, any command may have more bytes in its
command-body than are used by any command-body format below.  So for example,
if the command "WASTE" says that it takes a single fixed-length 4-byte field,
the command-body for a WASTE command may be any length of 4 or greater.
Extra bytes must be ignored by implementations that don't expect them.

The above paragraph should not be taken to imply that we'll actually do
anything to provide forward compatibility any time soon.

Flags can be:
      0x1 -- HASH
          (XXXX say more)

      0x2 -- SIGN
          (XXXX say more)


Currently implemented commands from the client are:

      GET    (code 0x1000)

      Command-Body:
        [32 bytes] distribution id
        [4 bytes]  bitfield length (in bits)
	[4 bytes]  block size
        [N bytes]  bitfield (0-padded to nearest byte)


     The distribution ID is the hash of a distribution's contents.  It's
     learned out-of-band.

     The bitfield length is in _bits_, not bytes.

     The block size must match the block size of the distribution, so the
     client doesn't get surprised.

     The bitfield selects which buckets from the distribution to xor together
     in the response.

      GET_METADATA (code 0x1001)

      Command Body:
        [32 bytes] distribution ID

      LIST_DISTRIBUTIONS (code 0x1002)

      Command Body:
        [Empty]


Currently implemented commands from the server are:

     DATA      (code 0x2001)
     METADATA  (code 0x2003)
     DISTLIST  (code 0x2004)

     Command-body:
        [4 bytes] data length
        [N bytes] data

     A response to a GET or METADATA command.  The data for DATA and METADATA
     is a raw blob; the DISTLIST body is:

        [4 bytes] N: Num distributions known
        Then, N times:
           [32 bytes] Distributor ID
           [64 bytes] Fname of this distribution, according to the distributor
           [32 bytes] Distribution ID.


     ERROR (code 0x2002)
        [4 bytes] error code
        [4 bytes] string length
        [N byets] string

     A response to an error in the client's behavior.

     XXXXXX list the error codes.


